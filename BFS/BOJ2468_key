import java.io.*;

public class Main {
  public static int[][] map;
  public static int N;
  public static void main(String[] args) throws IOException{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    N = Integer.parseInt(br.readLine());
    map = new int[N][N];
    for(int i=0; i<N; i++){
      String[] line = br.readLine().split(" ");
      for(int j=0; j<N; j++){
        map[i][j] = Integer.parseInt(line[j]);
      }
    }

    int cnt = 0;
    int max = 0;
    int[][] visit = new int[N][N];
    for(int i=0; i<=100; i++){ // 유의점: 비의 양이 0일 수도 있다는 거. 1부터인건 건물의 높이라는 거. 그래서 i=0으로 시작해야 한다는 거. 
      // 각 lv에서 안전 영역의 개수 cnt구하기
      for(int r=0; r<N; r++){
        for(int c=0; c<N; c++){
          if(BFS(r, c, i, visit)){
            cnt++;
          }
        }
      }
      if(cnt > max){
        max = cnt;
      }
      cnt = 0;
      visit = new int[N][N];
    }
    System.out.println(max);
  }
    

  public static boolean BFS(int r, int c, int lv, int[][] visit){
    if(r<0||c<0||r>=N||c>=N)
      return false;
    if(map[r][c] <= lv)
      return false;
    if(visit[r][c] == 1)
      return false;
    if(map[r][c] > lv){
      visit[r][c] = 1;
      BFS(r-1, c, lv, visit);
      BFS(r+1, c, lv, visit);
      BFS(r, c-1, lv, visit);
      BFS(r, c+1, lv, visit);
      return true;
    }
    return false;
  }
}

